---
import "../../../styles/global.css";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import Card2 from "../../../components/Card2.astro";
import Cage from "../../../components/Cage.astro";
import SearchBar from "../../../components/SearchBar.astro";
import Filters from "../../../components/Filters.astro";
import { fetchPosts, fetchCategories, decodeHTMLEntities } from "../../../scripts/scripts.js";

// Posts per page for category pages
const postsPerPage = 9;

// Generate static paths for paginated category pages (for page 2 and up)
// (The category index page at src/pages/category/[slug]/index.astro handles page 1.)
export async function getStaticPaths() {
  // Fetch all categories and posts from WordPress
  const categories = await fetchCategories();
  const allPosts = await fetchPosts();

  const paths = [];
  for (const cat of categories) {
    // Filter posts that belong to this category (using the category slug provided)
    //@ts-ignore
    const categoryPosts = allPosts.filter(post =>
    //@ts-ignore
      post.categories.some(c => c.slug === cat.slug)
    );
    const totalPosts = categoryPosts.length;
    const totalPages = Math.ceil(totalPosts / postsPerPage);
    // Generate paths only for page 2 and beyond
    for (let page = 2; page <= totalPages; page++) {
      paths.push({
        params: { slug: cat.slug, page: [page.toString()] },
        props: { categoryId: cat.id, categoryName: cat.name, totalPages }
      });
    }
  }
  return paths;
}

// Get route parameters and props
const { slug, page } = Astro.params;
const currentPage = parseInt(page?.[0] || "2"); // this file handles pages 2+
const { categoryId, categoryName, totalPages } = Astro.props;

// Fetch all categories to get the current category details if not provided via props
let currentCategoryId = categoryId;
let currentCategoryName = categoryName;

if (!currentCategoryId || !currentCategoryName) {
  const categories = await fetchCategories();
  //@ts-ignore
  const currentCategory = categories.find(cat => cat.slug === slug);
  if (currentCategory) {
    currentCategoryId = currentCategory.id;
    currentCategoryName = currentCategory.name;
  }
}

// Fetch posts filtered by category ID directly from the API
const posts = await fetchPosts(1, 100, currentCategoryId);

// Double-check: filter by matching category slug just to be safe
//@ts-ignore
const categoryPosts = posts.filter(post =>
//@ts-ignore
  post.categories.some(c => c.slug === slug)
);

// Calculate pagination
const start = (currentPage - 1) * postsPerPage;
const end = start + postsPerPage;
const currentPagePosts = categoryPosts.slice(start, end);
const calculatedTotalPages = Math.ceil(categoryPosts.length / postsPerPage);

// Validate that the current page is within range
const isValidPage = currentPage >= 1 && currentPage <= calculatedTotalPages;
---

<html lang="en">
  <head>
    <link rel="icon" type="image/svg+xml" href="/f1.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta charset="UTF-8" />
    <meta
      name="description"
      content={`OnBoard - ${currentCategoryName} - Page ${currentPage} of ${calculatedTotalPages}`}
    />
    <meta name="keywords" content="Formula 1, Blog, F1, OnBoard, Racing, Motorsport" />
    <meta name="author" content="00chestnut" />
    <meta name="robots" content="index, follow" />
    <meta property="og:title" content={`OnBoard - ${currentCategoryName} - Page ${currentPage}`} />
    <meta property="og:description" content={`Posts in the "${currentCategoryName}" category. Page ${currentPage} of ${calculatedTotalPages}.`} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={`https://your-website.com/category/${slug}/${currentPage}`} />
    <link rel="canonical" href={`https://your-website.com/category/${slug}/${currentPage}`} />
    <title>OnBoard - {currentCategoryName} - Page {currentPage}</title>
  </head>
  <body class="transition-colors duration-300 ease-in-out">
    <container>
      <Header />
      <main class="flex flex-col flex-grow min-h-screen">
        <Cage>
          <Filters />
          <div class="w-full mb-12">
            <SearchBar />
          </div>
          { !isValidPage ? (
            <div class="text-center p-8 bg-gray-100 border border-gray-200 rounded-lg shadow-sm">
              <h3 class="text-xl font-bold dark:text-white">Page Not Found</h3>
              <p class="mt-4 dark:text-gray-300">
                This page doesn't exist for the selected category.
              </p>
              <div class="mt-6">
                <a href={`/category/${slug}/`} class="px-4 py-2 bg-red-700 text-white rounded-lg hover:bg-red-800">
                  Go to first page
                </a>
              </div>
            </div>
          ) : currentPagePosts.length > 0 ? (
            //@ts-ignore
            currentPagePosts.map((post) => (
              <Card2
                picture={post.imageUrl}
                alt={post.title}
                name={post.title}
                desc={post.description}
                btn="Read more"
                slug={post.slug}
              />
            ))
          ) : (
            <div class="text-center p-8 bg-gray-100 border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700">
              <h3 class="text-xl font-bold dark:text-white">No posts found</h3>
              <br />
              <p class="dark:text-gray-300">
                No posts found in this category. Please try another category or <a href="/footerpages/contact" class="text-blue-500 bold hover:underline">contact</a> the site developer.
              </p>
              <br /><br />
              <div class="flex justify-center items-center">
                <img src="/images/shark.png" class="w-[15rem] h-[15rem] object-center" alt="Error shark" />
              </div>
            </div>
          )}
        </Cage>

        <!-- Pagination Controls -->
        <div class="pagination flex flex-wrap justify-center items-center my-4 md:my-8 gap-2 px-4">
          <!-- First page button -->
          <a href={`/category/${slug}/`} class="px-3 py-2 rounded-lg mb-4 bg-red-700 text-white hover:bg-red-800">
            &lt;&lt;
          </a>

          <!-- Previous page button -->
          <a href={currentPage > 2 ? `/category/${slug}/${currentPage - 1}` : `/category/${slug}/`} class="px-3 py-2 rounded-lg mb-4 bg-red-700 text-white hover:bg-red-800">
            &lt;
          </a>

          <!-- Page indicator -->
          <span class="PageNumber px-3 py-2 font-medium mb-4">
            Page {currentPage} of {calculatedTotalPages}
          </span>

          <!-- Next page button -->
          <a href={currentPage < calculatedTotalPages ? `/category/${slug}/${currentPage + 1}` : "#"} class={`px-3 py-2 mb-4 rounded-lg ${currentPage < calculatedTotalPages ? "bg-red-700 text-white hover:bg-red-800" : "bg-gray-300 text-gray-500 cursor-not-allowed"}`} aria-disabled={currentPage >= calculatedTotalPages}>
            &gt;
          </a>

          <!-- Last page button -->
          <a href={calculatedTotalPages > 1 ? `/category/${slug}/${calculatedTotalPages}` : "#"} class={`px-3 py-2 mb-4 rounded-lg transition-colors duration-300 ease-in-out ${currentPage < calculatedTotalPages ? "bg-red-700 text-white hover:bg-red-800" : "bg-gray-300 text-gray-500 cursor-not-allowed"}`} aria-disabled={currentPage >= calculatedTotalPages}>
            &gt;&gt;
          </a>
        </div>
      </main>
      <Footer />
    </container>

    <style is:global>
      * {
        transition-property: background-color, border-color, color, fill, stroke;
        transition-duration: 300ms;
        transition-timing-function: ease-in-out;
      }
    </style>
  </body>
</html>